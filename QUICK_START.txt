========================================
  QUICK START - ARM64 Version
========================================

FASTEST WAY TO DEPLOY ON ARM64 VPS
========================================

[1] Upload project ke VPS
    scp -r captcha-solver-yolo-arm.tar.gz user@vps-ip:~/
    
    # Or use git:
    git clone https://github.com/YOUR_USERNAME/captcha-solver-yolo-arm.git

[2] SSH ke VPS
    ssh user@vps-ip
    cd captcha-solver-yolo-arm

[3] Edit API Keys
    nano docker-compose.yml
    # Change: API_KEYS=["your-key-1", "your-key-2"]

[4] Build & Run (ONE COMMAND!)
    docker-compose up -d --build

[5] Test
    curl http://localhost:8000/api/v1/health

Done! API running on http://YOUR_VPS_IP:8000


========================================
ORACLE CLOUD ARM (FREE FOREVER!)
========================================

Best option for production - 100% FREE!

1. Sign up: cloud.oracle.com

2. Create VM:
   - Shape: VM.Standard.A1.Flex
   - OCPU: 4
   - RAM: 24GB
   - Image: Ubuntu 22.04
   - All FREE!

3. SSH & Deploy:
   ssh ubuntu@oracle-ip
   
   # Install Docker
   curl -fsSL https://get.docker.com | sudo sh
   sudo usermod -aG docker ubuntu
   exit && ssh ubuntu@oracle-ip
   
   # Clone & Run
   git clone YOUR_REPO
   cd captcha-solver-yolo-arm
   docker-compose up -d --build

4. Open port 8000 in Oracle Console


========================================
RASPBERRY PI QUICK START
========================================

1. Flash Raspberry Pi OS 64-bit
2. SSH: ssh pi@raspberrypi.local
3. Install Docker:
   curl -fsSL https://get.docker.com | sudo sh
   sudo usermod -aG docker pi
4. Upload & run project
5. Access: http://raspberrypi.local:8000


========================================
COMMANDS CHEAT SHEET
========================================

# Start
docker-compose up -d

# Stop
docker-compose down

# Logs
docker-compose logs -f

# Restart
docker-compose restart

# Rebuild
docker-compose down
docker-compose up -d --build

# Status
docker ps
docker stats


========================================
TEST API
========================================

# Health check
curl http://localhost:8000/api/v1/health

# Detection test
curl -X POST http://localhost:8000/api/v1/detect \
  -H "X-API-Key: your-key" \
  -F "file=@test.png"


========================================
PERFORMANCE TIPS
========================================

# Adjust threads for your CPU
environment:
  - OMP_NUM_THREADS=8  # = your CPU cores

# Reduce memory if needed
deploy:
  resources:
    limits:
      memory: 1G


========================================
TROUBLESHOOTING
========================================

Problem: Build fails
Solution: docker system prune -a && docker-compose build --no-cache

Problem: Out of memory
Solution: Add swap or reduce memory limit

Problem: Slow inference
Solution: Increase OMP_NUM_THREADS


For full guide, see: ARM64_GUIDE.txt
